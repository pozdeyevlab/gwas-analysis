"""
This meta analysis pipeline is set up as such:
"""

import datetime
import fnmatch
import re
import os
import sys
from pathlib import Path
from typing import Dict, List, Optional, Union

import attr

################################################################################
# Set Up & Data Structure
################################################################################
# Grab the location of various things from the config
# Input Files/Directories
genes: Path = dict(config['phenotype_genes_dict'])
output_dir: Path = Path(config["output_dir"])

@attr.s(frozen=True, auto_attribs=True, kw_only=True)
class Input:
    """Represents all necessary meta data for each biobank gwas"""

    input_file: str
    phenotype: str


inputs: Dict[str, List[Input]] = {}

for phenotype in genes:
    inputs[phenotype] = Input(input_file=genes[phenotype], phenotype = phenotype)
print(inputs)
################################################################################
# Directives
################################################################################
onerror:
    """Code that gets called  if / when the snakemake pipeline exits with an error.
    The `log` variable contains a path to the snakemake log file which can be parsed
    for more information. Summarizes information on failed jobs and writes it to the
    output.
    """
    try:
        path = Path(log)
        RULE_PREFIX = "Error in rule "
        LOG_PREFIX = "    log: "
        CMD_PREFIX = "Command "

        with path.open("r") as fh:
            lines: Iterable[str] = fh.readlines()

        while lines:
            lines = list(dropwhile(lambda l: not l.startswith(RULE_PREFIX), lines))
            if lines:
                rule_name = lines[0].rstrip()[len(RULE_PREFIX) : -1]
                lines = dropwhile(lambda l: not l.startswith(LOG_PREFIX), lines)
                log_path = Path(next(lines).rstrip()[len(LOG_PREFIX) :].split()[0])

                print(f"========== Start of Error Info for {rule_name} ==========")
                print(f"Failed rule: {rule_name}")
                print(f"Contents of log file: {log_path}")
                with log_path.open("r") as fh:
                    for line in fh.readlines():
                        print(f"    {line.rstrip()}")
                print(f"=========== End of Error Info for {rule_name} ===========")
    except Exception as ex:
        print("################################################")
        print("Exception raised in snakemake onerror handler.")
        print(str(ex))
        print("################################################")


################################################################################
# Beginning of rule declarations
################################################################################
rule all:
    """
    Default rule that is executed when snakemake runs.  The 'inputs' here list the set of files
    that the pipeline will generate by default if a specific list isn't provided.
    """
    input:
        [f'{output_dir}/{phenotype}_reactome.tsv' for phenotype in inputs],
        [f'{output_dir}/{phenotype}_kegg.tsv' for phenotype in inputs],
        [f'{output_dir}/{phenotype}_entrez_map.tsv' for phenotype in inputs],
        [f'{output_dir}/{phenotype}_reactome.png' for phenotype in inputs],
        [f'{output_dir}/{phenotype}_kegg.png' for phenotype in inputs],
        [f'{output_dir}/{phenotype}_kegg_with_gene_names.tsv' for phenotype in inputs],

rule enrich:
    params:
        output_prefix = '{output_dir}/{phenotype}'
    input:
        gene_file = lambda wc: inputs[wc.phenotype].input_file,
    output:
        reactome_tsv = '{output_dir}/{phenotype}_reactome.tsv',
        kegg_tsv = '{output_dir}/{phenotype}_kegg.tsv',
        reactome_png = '{output_dir}/{phenotype}_reactome.png',
        kegg_png = '{output_dir}/{phenotype}_kegg.png',
        entrez_map = '{output_dir}/{phenotype}_entrez_map.tsv'
    log:
        "{output_dir}/{phenotype}_enrich.log"
    conda:
        'r_environment.yml'
    shell:
        "Rscript run_enrichment.R "
        "--input {input.gene_file} "
        "--output {params.output_prefix} &> {log}"


rule map_kegg:
    input:
        kegg_results = '{output_dir}/{phenotype}_kegg.tsv',
        map_file = '{output_dir}/{phenotype}_entrez_map.tsv'
    output:
        '{output_dir}/{phenotype}_kegg_with_gene_names.tsv'
    log:
        '{output_dir}/{phenotype}_kegg_with_gene_names.log'
    shell:
        "python annotate_kegg.py "
        "--kegg-results {input.kegg_results} "
        "--kegg-map {input.map_file} "
        "--output {output} &> {log}"